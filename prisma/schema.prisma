datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model AccessToken {
  id            String       @id @default(uuid())
  githubId      Int         @unique
  username      String
  accessToken   String
  refreshToken  String?
  tokenExpiry   DateTime
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  invalidAt     DateTime?
  
  // Rate limit fields - Core API
  coreRateLimitRemaining Int     @default(0)
  coreRateLimitReset    DateTime @default(now())
  
  // Rate limit fields - Search API
  searchRateLimitRemaining Int     @default(0)
  searchRateLimitReset    DateTime @default(now())
  
  // Rate limit fields - GraphQL API
  graphqlRateLimitRemaining Int     @default(0)
  graphqlRateLimitReset    DateTime @default(now())
  
  lastUsed          DateTime @default(now())
  
  // Relations
  apiRequests       APIRequest[]
}

model APIRequest {
  id          String   @id @default(uuid())
  accessTokenId String
  accessToken AccessToken @relation(fields: [accessTokenId], references: [id])
  requestUrl  String
  requestParams Json
  responseHeaders Json
  responseBody Json
  statusCode  Int
  createdAt   DateTime @default(now())
  rateLimit   Int?
  rateLimitRemaining Int?
  rateLimitReset DateTime?

  // Relations
  fetchedUsers GitHubUser[]
  fetchedRepos Repository[]
  fetchedOrgs  Organization[]
  fetchedCommits Commit[]

  @@index([accessTokenId])
  @@index([createdAt])
}

model GitHubUser {
  id            Int      @id
  login         String   @unique
  name          String?
  email         String?
  bio           String?
  location      String?
  websiteUrl    String?
  avatarUrl     String?
  followers     Int      @default(0)
  following     Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastFetched   DateTime @default(now())

  // Reference to the API request that fetched this user's data
  fetchedFromRequestId String
  fetchedFromRequest   APIRequest @relation(fields: [fetchedFromRequestId], references: [id])

  // Relations
  repositories Repository[] @relation("UserRepositories")
  organizations Organization[] @relation("UserOrganizations")
  authoredCommits Commit[] @relation("CommitAuthor")
  committedCommits Commit[] @relation("CommitCommitter")
  scrapeJobs UserRepositoryScrapeJob[]

  @@index([fetchedFromRequestId])
}

model Organization {
  id            Int      @id
  login         String   @unique
  name          String?
  description   String?
  avatarUrl     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastFetched   DateTime @default(now())

  // Reference to the API request that fetched this org's data
  fetchedFromRequestId String
  fetchedFromRequest   APIRequest @relation(fields: [fetchedFromRequestId], references: [id])

  // Relations
  members      GitHubUser[] @relation("UserOrganizations")
  repositories Repository[] @relation("OrgRepositories")

  @@index([fetchedFromRequestId])
}

model Repository {
  id            Int      @id
  name          String
  fullName      String   @unique // owner/name
  description   String?
  isPrivate     Boolean
  isFork        Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastFetched   DateTime @default(now())

  // Reference to the API request that fetched this repo's data
  fetchedFromRequestId String
  fetchedFromRequest   APIRequest @relation(fields: [fetchedFromRequestId], references: [id])

  // Relations
  owner        GitHubUser? @relation("UserRepositories", fields: [ownerId], references: [id])
  ownerId      Int?
  organization Organization? @relation("OrgRepositories", fields: [orgId], references: [id])
  orgId        Int?
  commits      Commit[]
  scrapeJobs   UserRepositoryScrapeJob[]

  @@index([fetchedFromRequestId])
  @@index([ownerId])
  @@index([orgId])
}

model Commit {
  id            String   @id // SHA
  message       String
  authoredDate  DateTime
  committedDate DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Reference to the API request that fetched this commit's data
  fetchedFromRequestId String
  fetchedFromRequest   APIRequest @relation(fields: [fetchedFromRequestId], references: [id])

  // Relations
  repository   Repository @relation(fields: [repoId], references: [id])
  repoId       Int
  author       GitHubUser? @relation("CommitAuthor", fields: [authorId], references: [id])
  authorId     Int?
  committer    GitHubUser? @relation("CommitCommitter", fields: [committerId], references: [id])
  committerId  Int?

  @@index([fetchedFromRequestId])
  @@index([repoId])
  @@index([authorId])
  @@index([committerId])
}

model ScrapeJob {
  id            String   @id @default(uuid())
  startedAt     DateTime @default(now())
  completedAt   DateTime?
  erroredAt     DateTime?
  error         String?
  status        String   @default("RUNNING") // RUNNING, COMPLETED, ERRORED
  type          String   // e.g. "FULL_SYNC", "USER_SYNC", etc.
  metadata      Json?    // Additional metadata about the job
  lastHeartbeatAt DateTime @default(now())

  // Relations
  userRepoScrapes UserRepositoryScrapeJob[]

  @@index([status])
  @@index([startedAt])
  @@index([lastHeartbeatAt])
}

model UserRepositoryScrapeJob {
  id            String   @id @default(uuid())
  startedAt     DateTime @default(now())
  completedAt   DateTime?
  erroredAt     DateTime?
  error         String?
  status        String   @default("RUNNING") // RUNNING, COMPLETED, ERRORED
  newCommits    Int      @default(0)
  
  // Relations
  scrapeJob    ScrapeJob @relation(fields: [scrapeJobId], references: [id])
  scrapeJobId  String
  user         GitHubUser @relation(fields: [userId], references: [id])
  userId       Int
  repository   Repository @relation(fields: [repoId], references: [id])
  repoId       Int

  @@unique([userId, repoId, scrapeJobId])
  @@index([status])
  @@index([startedAt])
  @@index([userId])
  @@index([repoId])
  @@index([scrapeJobId])
} 